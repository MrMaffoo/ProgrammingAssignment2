install.package("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
bye()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- numvect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Maffoo")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(c(1:3), c("X", "Y", "Z", sep=""))
paste(1:3, c("X", "Y", "Z", sep=""))
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep= "-")
require(swirl)
swirl()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
require(swirl)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector\
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
?colnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
5 != 7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
q()
install.packages("Kernsmooth")
yes
install.packages("KernSmooth")
library(KernSmooth)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lappy(flag_shapes, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,,6,6))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem elem[2]))
lapply(unique_vals, function(elem) elem[2])
viewinfo()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
setwd("C:/Dropbox/Coursera/R Programming/ProgrammingAssignment2")
source(cachematrix.R)
source(cachematrix)
source('C:/Dropbox/Coursera/R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatric(1:10)
makeCacheMatrix(1:10)
matrix <- makeCacheMatrix(1:10)
matrix
cacheSolve(matrix)
matrix <- [2,4]
B = matrix(
+   c(2, 4, 3, 1, 5, 7),
+   nrow=3,
+   ncol=2)
matrix = matrix(c(1:6), nrow=3, ncol=3)
matrix
makeCacheMatrix(matrix)
source('C:/Dropbox/Coursera/R Programming/ProgrammingAssignment2/cachematrix.R')
makeVector(1:100)
testvec <- makeVector(1:100)
testvec
testvec$get
cachemean(testvec)
cachemean(testvec)
testvec$m
testvec$get()
r(testvec)
rm(testvec)
source('C:/Dropbox/Coursera/R Programming/ProgrammingAssignment2/cachematrix.R')
mtest <- makeCacheMatrix(matrix)
mtest
mtest$get()
cacheSolve(mtest)
cacheSolve
cacheSolve(mtest)
source('C:/Dropbox/Coursera/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mtest)
matrix <- matrix(c(1:4), nrow=2, ncol=2)
mtest <- makeCacheMatrix(matrix)
cacheSolve(mtest)
source('C:/Dropbox/Coursera/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mtest)
traceback(cacheSolve(mtest))
traceback(cacheSolve(mtest))
source('C:/Dropbox/Coursera/R Programming/ProgrammingAssignment2/cachematrix.R')
q()
0
1
quit()
end()
exit()
?
?
?debug
source('C:/Dropbox/Coursera/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mtest)
source('C:/Dropbox/Coursera/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mtest)
source('C:/Dropbox/Coursera/R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mtest)
source('C:/Dropbox/Coursera/R Programming/ProgrammingAssignment2/cachematrix.R')
mtest <- makeCacheMatrix(matrix)
cacheSolve(mtest)
cacheSolve(mtest)
